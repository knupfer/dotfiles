# -*- eval: (add-hook 'after-save-hook (lambda () (org-babel-load-file (buffer-file-name) t)) nil t) -*-
* initializing

** packages

#+BEGIN_SRC emacs-lisp
(package-initialize)
(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
        ("marmalade" . "http://marmalade-repo.org/packages/")
        ("melpa" . "http://melpa.milkbox.net/packages/")))
(setq indent-tab-mode nil)
#+END_SRC

** loadpath

#+BEGIN_SRC emacs-lisp
(mapc (lambda (x) (add-to-list 'load-path x))
      '("~/.emacs.d/lisp/"
        "~/git/indentation-tree.el/"
        "~/git/indentation-tree/"
        "~/git/lilypond-pretty-print/"
        "~/git/macro-type/"
        "~/git/org-panes/"
        "~/git/hs-align/"))
#+END_SRC

** require packages

#+BEGIN_SRC emacs-lisp
(mapc 'require '(hl-defined
                 indentation-tree
                 lilypond-pretty-print
                 pretty-symbols
                 yasnippet
                 macro-type
                 org-panes
                 hs-align
                 ;;               python-mode
                 ))
;;(add-to-list 'auto-mode-alist '("\\.py$" . python-mode))
#+END_SRC

** theming

#+BEGIN_SRC emacs-lisp
(load-theme 'deeper-blue)
#+END_SRC

** default layout

*** modes

#+BEGIN_SRC emacs-lisp
(display-time-mode t)
(scroll-bar-mode -1)
(fringe-mode '(0 . nil))
;;(fringe-mode (quote (0)) nil (fringe))
(column-number-mode 1)
(menu-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC

*** vars

#+BEGIN_SRC emacs-lisp
(setq font-use-system-font nil
      inhibit-startup-screen t
      split-height-threshold 500
      truncate-lines t
      visual-line-fringe-indicators '(nil right-curly-arrow)
      display-time-24hr-format t)
#+END_SRC

*** faces

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'mode-line nil
                    :background "#033"
                    :foreground "#9bb"
                    :box nil)
(set-face-attribute 'mode-line-buffer-id nil
                    :foreground "#99dddd"
                    :box nil :weight 'bold)
(set-face-attribute 'mode-line-inactive nil
                    :inherit 'mode-line
                    :background "gray32"
                    :foreground "black"
                    :box nil
                    :weight 'light)
(set-face-attribute 'default nil
                    :inherit nil
                    :stipple nil
                    :background "#000000"
                    :foreground "#ffffff"
                    :inverse-video nil
                    :box nil
                    :strike-through nil
                    :overline nil
                    :underline nil
                    :slant 'normal
                    :weight 'normal
                    :height 100
                    :width 'normal
                    :foundry "unknown"
                    :family "Source Code Pro")
(set-face-attribute 'fringe nil
                    :background "black"
                    :foreground "#0ff")
(set-face-attribute 'region nil
                    :background "#505")
#+END_SRC

** cursor

#+BEGIN_SRC emacs-lisp
(blink-cursor-mode -1)
(defvar hcz-set-cursor-color-color "")
(defvar hcz-set-cursor-color-buffer "")
(defun hcz-set-cursor-color-according-to-mode ()
  "change cursor color according to some minor modes."
  (let ((color (if (and (boundp 'knu-org-mode-map)
                        (org-inside-LaTeX-fragment-p)) "#2a6"
                 (if buffer-read-only "white"
                   (if overwrite-mode "#fa0"
                     "#909")))))
    (unless (and
             (string= color hcz-set-cursor-color-color)
             (string= (buffer-name) hcz-set-cursor-color-buffer))
      (set-cursor-color (setq hcz-set-cursor-color-color color))
      (setq hcz-set-cursor-color-buffer (buffer-name)))))
(set-face-attribute 'cursor nil :background "#709")
#+END_SRC

** key-map

#+BEGIN_SRC emacs-lisp
(mapc (lambda (x) (define-key global-map (kbd (car x)) (cadr x)))
      '(("<M-left>" backward-sentence)
        ("<M-right>" forward-sentence)
        ("<M-backspace>" backward-kill-sentence)
        ("<M-delete>" kill-sentence)
        ("\C-cm" magit-status)
        ("S-SPC" ace-jump-mode)))
#+END_SRC

** got root?

#+BEGIN_SRC emacs-lisp
(when (equal (getenv "USER") "root")
  (set-face-background 'mode-line "#400")
  (set-face-foreground 'mode-line "#b00")
  (set-face-foreground 'mode-line-buffer-id "#ee5555"))
#+END_SRC

* major-modes

** haskell
#+BEGIN_SRC emacs-lisp
(eval-after-load "haskell-mode"
  '(define-key haskell-mode-map (kbd "C-c C-c") 'haskell-compile))
#+END_SRC
** python
#+BEGIN_SRC emacs-lisp
(require 'jedi)
(require 'auto-complete)
(setq python-environment-virtualenv
      (append python-environment-virtualenv
              '("--python" "python3")))
(setq py-shell-name "python3")
(setq python-shell-exec-path "python3")
(setq jedi:environment-root "jedi"
      jedi:environment-virtualenv
      (append python-environment-virtualenv
              '("--python" "python3")))
(setq python-shell-interpreter "python3")
;;(add-hook 'python-mode-hook 'auto-complete-mode)
(add-hook 'python-mode-hook
          (lambda ()
            (jedi:setup)
            (jedi:ac-setup)))
#+END_SRC

** org

*** key-map

#+BEGIN_SRC emacs-lisp
(eval-after-load 'org
  '(mapc (lambda (x) (define-key org-mode-map (kbd (car x)) (cadr x)))
         '(("<f5>" knu-org-latex-snip) ("<f6>" knu-org-del-overlay)
           ("<M-left>" nil) ("<M-right>" nil)
           ("α" "\\alpha") ("β" "\\beta")
           ("γ" "\\gamma") ("δ" "\\delta")
           ("ε" "\\epsilon") ("ζ" "\\zeta")
           ("θ" "\\theta") ("ι" "\\iota")
           ("κ" "\\kappa") ("λ" "\\lambda")
           ("μ" "\\mu") ("ν" "\\nu")
           ("ξ" "\\xi") ("ο" "\\omicron")
           ("π" "\\pi") ("ρ" "\\rho")
           ("σ" "\\sigma") ("τ" "\\tau")
           ("φ" "\\phi") ("χ" "\\chi")
           ("ψ" "\\psi") ("ω" "\\omega"))))
#+END_SRC

*** functions

#+BEGIN_SRC emacs-lisp
(eval-after-load 'org
  '(progn
     (defun knu-org-latex-snip ()
       (interactive)
       (insert "\\begin{align*}\n\n")
       (insert "\\end{align*}")
       (forward-line -1))

     (defun knu-org-del-overlay ()
       (when (equal mode-name "Org")
         (mapc (lambda (o)
                 (if (eq (overlay-get o 'org-overlay-type)
                         'org-latex-overlay)
                     (delete-overlay o)))
               (overlays-at (point)))))

     (defun knu-org-auto-preview ()
       (setq knu-org-auto-preview-count nil)
       (when (equal mode-name "Org")
         (while-no-input (progn (when (not knu-org-auto-preview-count)
                                  (setq knu-org-auto-preview-count t)
                                  (knu-org-preview-latex-fragment)
                                  (redisplay)
                                  (knu-org-preview-latex-fragment))))
         (cd (file-name-directory buffer-file-name))))

     (defun knu-org-preview-latex-fragment ()
       (unless buffer-file-name
         (user-error "Can't preview LaTeX fragment in a non-file buffer"))
       (when (display-graphic-p)
         (save-excursion
           (save-restriction
             (let (beg end at msg pos at-snippet)
               (setq at-snippet (org-inside-LaTeX-fragment-p))
               (when (not at-snippet) (setq at-snippet t))
               (setq pos (point))
               (setq beg (window-start) end (window-end))
               (narrow-to-region beg end)
               (goto-char beg)
               (knu-org-format-latex
                (concat org-latex-preview-ltxpng-directory
                        (file-name-sans-extension
                         (file-name-nondirectory
                          buffer-file-name)))
                default-directory 'overlays nil at 'forbuffer
                org-latex-create-formula-image-program pos at-snippet))))))

     (defun knu-org-format-latex (prefix &optional
                                         dir overlays msg at forbuffer
                                         processing-type pos at-snippet)
       (if (and overlays (fboundp 'clear-image-cache)) (clear-image-cache))
       (let* ((prefixnodir (file-name-nondirectory prefix))
              (absprefix (expand-file-name prefix dir))
              (todir (file-name-directory absprefix))
              (opt org-format-latex-options)
              (optnew org-format-latex-options)
              (matchers (plist-get opt :matchers))
              (re-list org-latex-regexps)
              (cnt 0) txt hash link beg end re e checkdir
              string
              m n block-type block linkfile movefile ov)
         ;; Check the different regular expressions
         (while (setq e (pop re-list))
           (setq m (car e) re (nth 1 e) n (nth 2 e) block-type (nth 3 e)
                 block (if block-type "\n\n" ""))
           (when (member m matchers)
             (goto-char (point-min))
             (while (re-search-forward re nil t)
               (when (and (or (not at) (equal (cdr at) (match-beginning n)))
                          (or (not overlays)
                              (not (eq (get-char-property (match-beginning n)
                                                          'org-overlay-type)
                                       'org-latex-overlay))))
                 (setq txt (match-string n)
                       beg (match-beginning n) end (match-end n)
                       cnt (1+ cnt))
                 (when (not (and (> (+ pos 1) beg) (< pos end)))
                   (let ((face (face-at-point))
                         (fg (plist-get opt :foreground))
                         (bg (plist-get opt :background))
                         ;; Ensure full list is printed.
                         print-length print-level)
                     (when forbuffer
                       ;; Get the colors from the face at point.
                       (goto-char beg)
                       (when (eq fg 'auto)
                         (setq fg (face-attribute face :foreground nil
                                                  'default)))
                       (when (eq bg 'auto)
                         (setq bg (face-attribute face :background nil
                                                  'default)))
                       (setq optnew (copy-sequence opt))
                       (plist-put optnew :foreground fg)
                       (plist-put optnew :background bg))
                     (setq hash (sha1 (prin1-to-string
                                       (list org-format-latex-header
                                             org-latex-default-packages-alist
                                             org-latex-packages-alist
                                             org-format-latex-options
                                             forbuffer txt fg bg)))
                           linkfile (format "%s_%s.png" prefix hash)
                           movefile (format "%s_%s.png" absprefix hash)))
                   (setq link (concat block "[[file:" linkfile "]]" block))
                   (goto-char beg)
                   (unless checkdir     ; Ensure the directory exists.
                     (setq checkdir t)
                     (or (file-directory-p todir) (make-directory todir t)))
                   (unless (file-exists-p movefile)
                     (org-create-formula-image
                      txt movefile optnew forbuffer processing-type)
                     (save-excursion
                       (goto-char pos)
                       (redisplay)))
                   (if overlays
                       (progn
                         (mapc (lambda (o)
                                 (if (eq (overlay-get o 'org-overlay-type)
                                         'org-latex-overlay)
                                     (delete-overlay o)))
                               (overlays-in beg end))
                         (setq ov (make-overlay beg end))
                         (overlay-put ov 'org-overlay-type 'org-latex-overlay)
                         (if (featurep 'xemacs)
                             (progn
                               (overlay-put ov 'invisible t)
                               (overlay-put
                                ov 'end-glyph
                                (make-glyph (vector 'png :file movefile))))
                           (overlay-put
                            ov 'display
                            (list 'image
                                  :type 'png
                                  :file movefile
                                  :ascent 'center)))
                         (push ov org-latex-fragment-image-overlays)
                         (goto-char end))
                     (delete-region beg end)
                     (insert (org-add-props link
                                 (list 'org-latex-src
                                       (replace-regexp-in-string
                                        "\"" "" txt)
                                       'org-latex-src-embed-type
                                       (if block-type 'paragraph
                                         'character))))))))))))))
#+END_SRC

*** misc

#+BEGIN_SRC emacs-lisp
(setq org-babel-load-languages '((python . t) (ditaa . t)
                                 (sh . t) (lilypond . t)
                                 (R . t) (emacs-lisp . t)
                                 (ledger . t))
      org-catch-invisible-edits 'error
      org-confirm-babel-evaluate nil
      org-ditaa-eps-jar-path "~/.emacs.d/DitaaEps.jar"
      org-ditaa-jar-path "~/.emacs.d/ditaa0_9.jar"
      org-drawers '("PROPERTIES" "CLOCK" "LOGBOOK" "RESULTS" "INIT")
      org-edit-src-content-indentation 0
      org-export-backends '(ascii html latex odt)
      org-export-headline-levels 4
      org-export-run-in-background t
      org-format-latex-options '(:foreground "#0da"
                                             :background default
                                             :scale 2.0
                                             :html-foreground "Black"
                                             :html-background "Transparent"
                                             :html-scale 1.0
                                             :matchers ("begin" "$1" "$" "$$" "\\(" "\\["))
      org-hierarchical-todo-statistics nil
      org-highlight-latex-and-related '(latex script entities)
      org-image-actual-width 200
      org-latex-classes '(("article" "\\documentclass[11pt]{scrartcl}"
                           ("\\section{%s}" . "\\section*{%s}")
                           ("\\subsection{%s}" . "\\subsection*{%s}")
                           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                           ("\\paragraph{%s}" . "\\paragraph*{%s}")
                           ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
                          ("report" "\\documentclass[11pt]{report}"
                           ("\\part{%s}" . "\\part*{%s}")
                           ("\\chapter{%s}" . "\\chapter*{%s}")
                           ("\\section{%s}" . "\\section*{%s}")
                           ("\\subsection{%s}" . "\\subsection*{%s}")
                           ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
                          ("book" "\\documentclass[11pt]{book}"
                           ("\\part{%s}" . "\\part*{%s}")
                           ("\\chapter{%s}" . "\\chapter*{%s}")
                           ("\\section{%s}" . "\\section*{%s}")
                           ("\\subsection{%s}" . "\\subsection*{%s}")
                           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
      org-latex-inactive-timestamp-format "\\\\\\hfill\\textcolor{gray}{\\textbf{%s}}\\\\"
      org-latex-preview-ltxpng-directory "~/ltxpreview/"
      org-list-allow-alphabetical t
      org-list-empty-line-terminates-plain-lists t
      org-log-done 'time
      org-replace-disputed-keys t
      org-src-fontify-natively t
      org-startup-align-all-tables t
      org-startup-folded 'content
      org-startup-indented t
      org-startup-truncated nil
      org-startup-with-inline-images t
      org-support-shift-select 'always
      org-todo-keyword-faces '(("FAILED" . "#f00") ("CANCELED" . "#ee3"))
      org-todo-keywords '((sequence "TODO" "|" "DONE" "CANCELED" "FAILED"))
      org-format-latex-header "\\documentclass{article}
\\usepackage[usenames]{color}
\\usepackage{etoolbox}
\\usepackage{mdframed}
[PACKAGES]
[DEFAULT-PACKAGES]
\\pagestyle{empty}             % do not remove
% The settings below are copied from fullpage.sty
\\setlength{\\textwidth}{\\paperwidth}
\\addtolength{\\textwidth}{-13cm}
\\setlength{\\oddsidemargin}{1.5cm}
\\addtolength{\\oddsidemargin}{-2.54cm}
\\setlength{\\evensidemargin}{\\oddsidemargin}
\\setlength{\\textheight}{\\paperheight}
\\addtolength{\\textheight}{-\\headheight}
\\addtolength{\\textheight}{-\\headsep}
\\addtolength{\\textheight}{-\\footskip}
\\addtolength{\\textheight}{-3cm}
\\setlength{\\topmargin}{1.5cm}
\\addtolength{\\topmargin}{-2.54cm}
\\definecolor{bg}{rgb}{0,0.1,0.1}\\definecolor{fg}{rgb}{0.2,1,0.7}
\\BeforeBeginEnvironment{align*}{\\begin{mdframed}[backgroundcolor=bg, innertopmargin=-0.2cm]\\color{fg}}
\\AfterEndEnvironment{align*}{\\end{mdframed}}
\\BeforeBeginEnvironment{align}{\\begin{mdframed}[backgroundcolor=bg, innertopmargin=-0.2cm]\\color{fg}}
\\AfterEndEnvironment{align}{\\end{mdframed}}
\\BeforeBeginEnvironment{gather*}{\\begin{mdframed}[backgroundcolor=bg, innertopmargin=-0.2cm]\\color{fg}}
\\AfterEndEnvironment{gather*}{\\end{mdframed}}
\\BeforeBeginEnvironment{gather}{\\begin{mdframed}[backgroundcolor=bg, innertopmargin=-0.2cm]\\color{fg}}
\\AfterEndEnvironment{gather}{\\end{mdframed}}
\\newenvironment{definition}{\\begin{mdframed}[backgroundcolor=bg]\\color{fg} \\textbf{\\textsc{Definition:}} }{\\end{mdframed}}
\\newenvironment{note}{\\begin{mdframed}[backgroundcolor=bg]\\color{fg} \\textbf{\\textsc{Bemerkung:}} }{\\end{mdframed}}
\\newenvironment{example}{\\begin{mdframed}[backgroundcolor=bg]\\color{fg} \\textbf{\\textsc{Beispiel:}} }{\\end{mdframed}}")
#+END_SRC

*** faces

#+BEGIN_SRC emacs-lisp
(eval-after-load 'org-mode
  '(progn
     (set-face-attribute 'org-archived nil :foreground "#254555")
     (set-face-attribute 'org-checkbox nil :inherit 'bold :foreground "#2f2")
     (set-face-attribute 'org-done nil :foreground "#5f5" :weight 'ultra-bold)
     (set-face-attribute 'org-hide nil :foreground "#777")
     (set-face-attribute 'org-indent nil :background "black" :foreground "black")
     (set-face-attribute 'org-todo nil :foreground "#faa" :weight 'ultra-bold)
     (set-face-attribute 'outline-1 nil :inherit 'font-lock-function-name-face :foreground "SkyBlue1" :weight 'bold)))
#+END_SRC

** lilypond

#+BEGIN_SRC emacs-lisp
(setq LilyPond-indent-level 4)
#+END_SRC

** manpages

#+BEGIN_SRC emacs-lisp
(setq Man-notify-method 'pushy
      Man-width 80)
#+END_SRC

** ediff

#+BEGIN_SRC emacs-lisp
(setq ediff-split-window-function 'split-window-horizontally
      ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC

** erc

#+BEGIN_SRC emacs-lisp
(setq erc-nick "quxbam"
      erc-prompt ">>>"
      erc-prompt-for-password nil
      erc-system-name "foobar"
      erc-timestamp-right-column 70)
(eval-after-load 'erc-mode
  '(set-face-attribute 'erc-prompt-face nil :background "Black"
                       :foreground "lightBlue2" :weight 'bold))
#+END_SRC

** eshell

#+BEGIN_SRC emacs-lisp
;; (eval-after-load 'eshell
;;   '(setq eshell-banner-message nil
;;          eshell-cmpl-compare-entry-function 'string-lessp
;;          eshell-modules-list '(eshell-alias eshell-banner
;;                                             eshell-basic eshell-cmpl
;;                                             eshell-dirs eshell-glob
;;                                             eshell-hist eshell-ls
;;                                             eshell-pred eshell-prompt
;;                                             eshell-script eshell-smart
;;                                             eshell-term eshell-unix)
;;          eshell-plain-grep-behavior t))
#+END_SRC

** gnus

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Florian Knupfer"
      user-mail-address "fknupfer@gmail.com"
      message-generate-headers-first t
      message-send-mail-function 'smtpmail-send-it
      smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
      smtpmail-auth-credentials '(("smtp.gmail.com" 587
                                   "fknupfer@gmail.com" nil))
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587
      starttls-use-gnutls t)
 (setq mail-user-agent (quote gnus-user-agent))

(eval-after-load "mm-decode"
  '(progn
     (add-to-list 'mm-discouraged-alternatives "text/html")
     (add-to-list 'mm-discouraged-alternatives "text/richtext")))

(setq gnus-default-adaptive-word-score-alist '((82 . 1) (67 . -1)
                                               (75 . -2) (114 . -1))
      gnus-treat-fill-article t
      gnus-treat-leading-whitespace t
      gnus-treat-strip-multiple-blank-lines t
      gnus-treat-strip-trailing-blank-lines t
      gnus-treat-unsplit-urls t)

(eval-after-load 'gnus
  '(progn
     (setq gnus-select-method '(nnimap "gmail"
                                       (nnimap-address "imap.gmail.com")
                                       (nnimap-server-port 993)
                                       (nnimap-stream ssl)))

     (add-to-list 'gnus-secondary-select-methods
                  '(nntp "eternal september"
                         (nntp-address "reader443.eternal-september.org")
                         (nntp-authinfo-force t)))
     (add-to-list 'gnus-secondary-select-methods
                  '(nntp "gmane"
                         (nntp-address "news.gmane.org")))
     (add-to-list 'gnus-secondary-select-methods
                  '(nnimap "Musikschule"
                           (nnimap-address "secure.emailsrvr.com")
                           (nnimap-server-port 993)
                           (nnimap-stream ssl)))

     (setq-default gnus-summary-mark-below -300
                   gnus-summary-thread-gathering-function 'gnus-gather-threads-by-references)
     (setq gnus-face-5 'font-lock-comment-face)
     (make-face 'my-gnus-face-6)
     (set-face-attribute 'my-gnus-face-6 nil
                         :foreground "#9EE"
                         :background "#333"
                         :weight 'bold)
     (setq gnus-face-6 'my-gnus-face-6)
     (make-face 'my-gnus-face-7)
     (set-face-attribute 'my-gnus-face-7 nil
                         :foreground "#9EE"
                         :background "#333"
                         :weight 'bold
                         :box '(:line-width -1 :color "#555"))
     (setq gnus-face-7 'my-gnus-face-7)
     (setq gnus-summary-thread-gathering-function 'gnus-gather-threads-by-subject
           gnus-thread-sort-functions '((not gnus-thread-sort-by-date))
           gnus-summary-line-format
           "%U%R%z %5{│%}%6{ %d %}%5{│%} %-23,23f %5{│%}%* %5{%B%}%s\\n"
           gnus-sum-thread-tree-false-root " • "
           gnus-sum-thread-tree-indent " "
           gnus-sum-thread-tree-leaf-with-other "├─▶ "
           gnus-sum-thread-tree-root "• "
           gnus-sum-thread-tree-single-leaf "└─▶ "
           gnus-sum-thread-tree-vertical "│"
           gnus-group-line-format "%M%S%p%P%5y:%B%(%G%)\n"
           gnus-posting-styles '((message-news-p
                                  (name "quxbam")
                                  (address "no@news.invalid"))))
     (setq gnus-use-adaptive-scoring '(word))
     (setq gnus-parameters
           '(("WIKI"
              (gnus-summary-line-format
               "%U%R %5{│%}%6{ %5,5i %}%5{│%}%* %-40,40f %5{│ %s%}\\n")
              (gnus-article-sort-functions '(gnus-article-sort-by-author gnus-article-sort-by-subject gnus-article-sort-by-score))
              (gnus-show-threads nil))))
     (setq nnml-use-compressed-files t
           gnus-topic-display-empty-topics nil
           gnus-topic-line-format "%i%i%7{ %(%-12n%)%7A %}\n")
     (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)

     (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
     ))
#+END_SRC

** w3m

*** vars

#+BEGIN_SRC emacs-lisp
(setq w3m-enable-google-feeling-lucky nil
      w3m-home-page "about:blank"
      w3m-search-default-engine "duckduckgo"
      w3m-fill-column 60
      w3m-search-engine-alist
      '(("duckduckgo" "https://duckduckgo.com/lite/?q=%s" undecided)
        ("yahoo" "https://search.yahoo.com/bin/search?p=%s" nil)
        ("blog" "https://blogsearch.google.com/blogsearch?q=%s&oe=utf-8&ie=utf-8" utf-8)
        ("blog-en" "https://blogsearch.google.com/blogsearch?q=%s&hl=en&oe=utf-8&ie=utf-8" utf-8)
        ("google" "https://www.google.com/search?q=%s&ie=utf-8&oe=utf-8" utf-8)
        ("google-en" "https://www.google.com/search?q=%s&hl=en&ie=utf-8&oe=utf-8" utf-8)
        ("google news" "https://news.google.com/news?q=%s&ie=utf-8&oe=utf-8" utf-8)
        ("google news-en" "https://news.google.com/news?q=%s&hl=en&ie=utf-8&oe=utf-8" nil)
        ("google groups" "https://groups.google.com/groups?q=%s" nil)
        ("All the Web" "http://www.alltheweb.com/search?q=%s&web&_sb_lang=en" nil)
        ("technorati" "http://www.technorati.com/search/%s" utf-8)
        ("technorati-ja" "http://www.technorati.jp/search/search.html?query=%s&language=ja" utf-8)
        ("technorati-tag" "http://www.technorati.com/tag/%s" utf-8)
        ("altavista" "https://altavista.com/sites/search/web?q=\"%s\"&kl=ja&search=Search" nil)
        ("debian-pkg" "http://packages.debian.org/cgi-bin/search_contents.pl?directories=yes&arch=i386&version=unstable&case=insensitive&word=%s" nil)
        ("debian-bts" "http://bugs.debian.org/cgi-bin/pkgreport.cgi?archive=yes&pkg=%s" nil)
        ("amazon" "https://www.amazon.com/exec/obidos/search-handle-form/250-7496892-7797857" iso-8859-1 "url=index=blended&field-keywords=%s")
        ("emacswiki" "http://www.emacswiki.org/cgi-bin/wiki?search=%s" nil)
        ("en.wikipedia" "https://en.wikipedia.org/wiki/Special:Search?search=%s" nil)
        ("de.wikipedia" "https://de.wikipedia.org/wiki/Spezial:Search?search=%s" utf-8)
        ("freshmeat" "http://freshmeat.net/search/?q=%s&section=projects" nil))
      w3m-session-load-crashed-sessions nil
      w3m-uri-replace-alist
      '(("\\`enwi:" w3m-search-uri-replace "en.wikipedia")
        ("\\`dewi:" w3m-search-uri-replace "de.wikipedia")
        ("\\`dd:" w3m-search-uri-replace "duckduckgo")
        ("\\`gg:" w3m-search-uri-replace "google")
        ("\\`ggg:" w3m-search-uri-replace "google groups")
        ("\\`ya:" w3m-search-uri-replace "yahoo")
        ("\\`al:" w3m-search-uri-replace "altavista")
        ("\\`bts:" w3m-search-uri-replace "debian-bts")
        ("\\`dpkg:" w3m-search-uri-replace "debian-pkg")
        ("\\`archie:" w3m-search-uri-replace "iij-archie")
        ("\\`alc:" w3m-search-uri-replace "alc")
        ("\\`urn:ietf:rfc:\\([0-9]+\\)" w3m-pattern-uri-replace "http://www.ietf.org/rfc/rfc\\1.txt"))
      w3m-use-favicon nil
      w3m-use-title-buffer-name t
      apropos-url-alist
      '(("^gw?:? +\\(.*\\)" . ;; Google Web
         "http://www.google.com/search?q=\\1")
        ("^g!:? +\\(.*\\)" . ;; Google Lucky
         "http://www.google.com/search?btnI=I%27m+Feeling+Lucky&q=\\1")
        ("^gl:? +\\(.*\\)" . ;; Google Linux
         "http://www.google.com/linux?q=\\1")
        ("^gi:? +\\(.*\\)" . ;; Google Images
         "http://images.google.com/images?sa=N&tab=wi&q=\\1")
        ("^gg:? +\\(.*\\)" . ;; Google Groups
         "http://groups.google.com/groups?q=\\1")
        ("^gd:? +\\(.*\\)" . ;; Google Directory
         "http://www.google.com/search?&sa=N&cat=gwd/Top&tab=gd&q=\\1")
        ("^gn:? +\\(.*\\)" . ;; Google News
         "http://news.google.com/news?sa=N&tab=dn&q=\\1")
        ("^gt:? +\\(\\w+\\)|? *\\(\\w+\\) +\\(\\w+://.*\\)" . ;; Google Translate URL
         "http://translate.google.com/translate?langpair=\\1|\\2&u=\\3")
        ("^gt:? +\\(\\w+\\)|? *\\(\\w+\\) +\\(.*\\)" . ;; Google Translate Text
         "http://translate.google.com/translate_t?langpair=\\1|\\2&text=\\3")
        ("^/\\.$" . ;; Slashdot
         "http://www.slashdot.org")
        ("^/\\.:? +\\(.*\\)" . ;; Slashdot search
         "http://www.osdn.com/osdnsearch.pl?site=Slashdot&query=\\1")
        ("^fm$" . ;; Freshmeat
         "http://www.freshmeat.net")
        ("^ewiki:? *?\\(.*\\)" . ;; Emacs Wiki Search
         "http://www.emacswiki.org/cgi-bin/wiki?search=\\1")
        ("^ewiki$" . ;; Emacs Wiki
         "http://www.emacswiki.org")
        ("^arda$" . ;; The Encyclopedia of Arda
         "http://www.glyphweb.com/arda/")))
#+END_SRC

*** functions

#+BEGIN_SRC emacs-lisp
(eval-after-load 'w3m
  '(progn
     (defun knu-w3m-cleanup ()
       (save-excursion
         (goto-char (point-min))
         (while (re-search-forward "^ *\\*+ *$\\| +$" nil t)
           (replace-match ""))))

     (defun knu-w3m-orgify ()
       (require 'org)
       (setq knu-headings nil
             knu-headings-number nil)
       (let ((curr-url w3m-current-url))
         (with-temp-buffer
           (w3m-retrieve (concat "about://source/" curr-url))
           (goto-char (point-min))
           (while (re-search-forward
                   "<h\\([0-9]+\\)[^>]*\\(><[^>]+\\)*> *\\([^<]+\\)" nil t)
             (add-to-list 'knu-headings (list (string-to-number (match-string-no-properties 1)) (match-string-no-properties 3)) t)
             (add-to-list 'knu-headings-number (string-to-number (match-string-no-properties 1)))
             (let ((y 0))
               (setq knu-headings-number (sort knu-headings-number '<))
               (setq knu-headings-array (make-vector (1+ (car (last knu-headings-number))) 0))
               (mapc (lambda (x) (setq y (1+ y)) (aset knu-headings-array x (- y x)))
                     knu-headings-number))))
         (save-excursion
           (goto-char (point-min))
           (when org-startup-indented
             (org-indent-mode 1))
           (while knu-headings
             (let ((level (+ (caar knu-headings)
                             (elt knu-headings-array (caar knu-headings))))
                   (heading (cadr (pop knu-headings)))
                   face1
                   face2)
               (save-excursion
                 (re-search-forward (concat "\\("
                                            (make-string (1- level) ?.)
                                            "\\)\\(..\\)") nil t)
                 (setq face1 (org-get-level-face 1)
                       face2 (org-get-level-face 2))
                 (while (re-search-forward "^*+ *$" nil t)
                   (replace-match "")))
               (when (re-search-forward (concat "^" heading ".*\n\n") nil t)
                 (replace-match
                  (concat
                   (propertize
                    (make-string (1- level) ?*) 'face face1)
                   (propertize (concat "* " heading "\n\n") 'face face2))))))
           (hide-sublevels 10))))

     (defun w3m-filter-find-relationships (url next previous)
       "Add <LINK> tags if they don't yet exist."
       (let ((case-fold-search t))
         (goto-char (point-max))
         (when (re-search-backward next nil t)
           (when (re-search-backward "href=\"?\\([^\" \t\n]+\\)" nil t)
             (setq w3m-next-url (match-string 1))))
         (when (re-search-backward previous nil t)
           (when (re-search-backward "href=\"?\\([^\" \t\n]+\\)" nil t)
             (setq w3m-previous-url (match-string 1))))))

     (defun w3m-download-with-wget ()
       (interactive)
       (let ((url (or (w3m-anchor) (w3m-image))))
         (cd "~/")
         (if url
             (let ((proc (start-process "wget" "*wget*"
                                        "wget" "-nv"
                                        "-P" "Downloads" url)))
               (message "Download started")
               (with-current-buffer (process-buffer proc) (insert "\n"))
               (set-process-sentinel proc (lambda (proc str)
                                            (message "wget download done"))))
           (message "Nothing to get"))))

     (defun sacha/w3m-open-in-firefox ()
       (interactive)
       (browse-url-firefox w3m-current-url))

     (defun browse-apropos-url (text &optional new-window)
       (interactive (browse-url-interactive-arg "Location: "))
       (let ((text (replace-regexp-in-string
                    "^ *\\| *$" ""
                    (replace-regexp-in-string "[ \t\n]+" " " text)))
             ___braplast)
         (let ((url (or (assoc-if
                         (lambda (a) (string-match a text))
                         apropos-url-alist)
                        text)))
           (browse-url (replace-regexp-in-string (car url) (cdr url) text) new-window))))))
#+END_SRC

*** key-map

#+BEGIN_SRC emacs-lisp
(eval-after-load 'w3m
  '(mapc (lambda (x) (define-key w3m-mode-map (kbd (car x)) (cadr x)))
         '(("M-<left>" w3m-view-previous-page)
           ("M-<right>" w3m-view-next-page)
           ("RET" w3m-view-this-url-new-session)
           ("C-w" w3m-delete-buffer)
           ("S-RET" w3m-view-this-url)
           ("<tab>" org-cycle)
           ("<S-iso-lefttab>" org-shifttab)
           ("d" w3m-download-with-wget)
           ("g" w3m-goto-url)
           ("G" w3m-goto-url-new-session)
           ("C-f" sacha/w3m-open-in-firefox)
           ("M-RET" w3m-view-this-url-new-session)
           ("<left>" backward-char)
           ("<right>" forward-char)
           ("<up>" previous-line)
           ("<down>" next-line)
           ("M-<down>" w3m-next-anchor)
           ("M-<up>" w3m-previous-anchor)
           ("S-SPC" ace-jump-mode))))
#+END_SRC

*** faces

#+BEGIN_SRC emacs-lisp
(eval-after-load 'w3m
  '(progn (set-face-attribute 'w3m-arrived-anchor nil :foreground "#8888ee")
          (set-face-attribute 'w3m-current-anchor nil :weight 'ultra-bold)
          (set-face-attribute 'w3m-tab-background nil :foreground "#88dddd" :background "black")
          (set-face-attribute 'w3m-tab-selected nil :foreground "black" :background "grey75")
          (set-face-attribute 'w3m-tab-selected-retrieving nil :foreground "black" :background "#dd6666")
          (set-face-attribute 'w3m-tab-unselected nil :foreground "black" :background "grey30")
          (set-face-attribute 'w3m-tab-unselected-retrieving nil :foreground "black" :background "#aa4444")
          (set-face-attribute 'w3m-tab-unselected-unseen nil :foreground "black" :background "grey90")))
#+END_SRC

** volume

#+BEGIN_SRC emacs-lisp
(eval-after-load 'volume
  '(progn (setq volume-amixer-default-channel "Speaker"
                volume-backend 'volume-amixer-backend
                volume-electric-mode t)))
#+END_SRC

** magit

#+BEGIN_SRC emacs-lisp
#+END_SRC

* minor-modes

** autocomplete
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'popup-tip-face nil
                    :foreground "#000"
                    :background "#5cd")
(set-face-attribute 'popup-face nil
                    :foreground "#ccc"
                    :background "#333")
(set-face-attribute 'popup-menu-selection-face nil
                    :foreground "#cff"
                    :background "#555")
(setq ac-override-local-map nil
      ac-use-menu-map t
      ac-candidate-limit 20)
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
(global-flycheck-mode 1)
(eval-after-load 'flycheck
  '(progn
     (add-to-list 'flycheck-checkers 'haskell-hlint-extensions)

     (flycheck-define-checker haskell-hlint-extensions
       "Use hlint extensions

See URL `https://github.com/ndmitchell/hlint'."
       :command ("hlint" "--hint=Generalise" "--hint=Dollar" source-inplace)
       :error-patterns
       ((info line-start
              (file-name) ":" line ":" column
              ": Warning: "
              (message (one-or-more not-newline)
                       (one-or-more "\n" (one-or-more not-newline)))
              line-end)
        (info line-start
              (file-name) ":" line ":" column
              ": Error: "
              (message (one-or-more not-newline)
                       (one-or-more "\n" (one-or-more not-newline)))
              line-end))
       :modes haskell-mode
       :next-checkers ((t . haskell-ghc)))

     (set-face-attribute 'flycheck-error nil
                         :foreground "#D00"
                         :background "#222"
                         :underline nil
                         :weight 'ultrabold)
     (set-face-attribute 'flycheck-warning nil
                         :foreground "#CC0"
                         :background "#222"
                         :underline nil
                         :weight 'ultrabold)
     (set-face-attribute 'flycheck-info nil
                         :foreground "#00F"
                         :background "#222"
                         :underline nil
                         :weight 'ultrabold)))
#+END_SRC
** keyfreq

#+BEGIN_SRC emacs-lisp
(keyfreq-autosave-mode 1)
(keyfreq-mode 1)
#+END_SRC

** whitespace

#+BEGIN_SRC emacs-lisp
(setq whitespace-style '(face trailing tabs)
      whitespace-tab-regexp "\\(\\\\alpha\\|\\\\beta\\|\\\\gamma\\|\\\\mu\\|\\\\nu\\|\\\\epsilon\\|\\\\lambda\\|\\\\sigma\\|\\\\tau\\|\\\\eta\\|\\\\omega\\|\\\\theta\\|\\\\rho\\|\\\\phi\\|\\\\psi\\|\\\\upsilon\\|\\\\pi\\|\\\\delta\\|\\\\kappa\\|\\\\xi\\|\\\\chi\\|\\\\Pi\\|\\\\Phi\\|\\\\Gamma\\|\\\\Omega\\|\\\\Lambda\\|\\\\nabla\\|\\\\Delta\\|\\\\int\\|\\\\oint\\|\\\\times\\|\\\\cdot\\|\\\\sum\\|\\\\pm\\|\\\\mp\\|\\\\geq\\|\\\\leq\\|\\\\neq\\|\\\\approx\\|\\\\rightarrow\\|\\\\leftarrow\\|\\\\Rightarrow\\|\\\\Leftarrow\\|\\\\mapsto\\|\\\\curvearrowright\\|\\\\leftrightarrow\\|\\\\mathrm{d}\\|\\\\infty\\|\\\\partial\\|\\\\equiv\\|\\\\ll\\|IO \\)")

(eval-after-load 'whitespace
  '(set-face-attribute 'whitespace-tab nil
                       :background "nil"
                       :foreground "#00eeaa"
                       :weight 'ultra-bold))
#+END_SRC

** paredit

*** key-map

#+BEGIN_SRC emacs-lisp
(eval-after-load 'paredit
  '(mapc (lambda (x) (define-key paredit-mode-map (kbd (car x)) (cadr x)))
         '(("<C-right>" nil)
           ("<C-left>" nil)
           ("<M-right>" paredit-forward)
           ("<M-left>" paredit-backward)
           ("<C-up>" paredit-forward-barf-sexp)
           ("<C-down>" paredit-forward-slurp-sexp)
           ("<M-up>" paredit-backward-slurp-sexp)
           ("<M-down>" paredit-backward-barf-sexp)
           ("<M-backspace>" backward-kill-sexp)
           ("<M-delete>" kill-sexp)
           ("C-k" paredit-kill-and-join-forward)
           ("<delete>" paredit-del-and-join-forward)
           ("<backspace>" paredit-del-backward-and-join)
           ("<tab>" completion-at-point)
           ("<RET>" paredit-newline)
           ("<C-backspace>" paredit-backward-kill-word)
           ("<C-delete>" paredit-forward-kill-word)
           ("{" paredit-open-curly)
           ("}" paredit-close-curly))))
#+END_SRC

*** functions

#+BEGIN_SRC emacs-lisp
(defvar buffer-undo-list-tmp nil)

(defun auto-indent-sexps ()
  (save-excursion (paredit-indent-sexps)))

(defun paredit-del-and-join-forward (&optional arg)
  (interactive "P")
  (if (and (eolp) (not (bolp)))
      (delete-indentation t)
    (paredit-forward-delete arg)))

(defun paredit-kill-and-join-forward (&optional arg)
  (interactive "P")
  (if (and (eolp) (not (bolp)))
      (delete-indentation t)
    (paredit-kill arg)))

(defun paredit-del-backward-and-join (&optional arg)
  (interactive "P")
  (if (looking-back "\\(^ *\\)")
      (delete-indentation)
    (paredit-backward-delete arg)))
#+END_SRC

** cua

#+BEGIN_SRC emacs-lisp
;;(cua-mode 1)
;;(setq cua-normal-cursor-color "black")
#+END_SRC

** flyspell

#+BEGIN_SRC emacs-lisp
(eval-after-load 'flyspell
  '(progn (set-face-attribute 'flyspell-duplicate nil
                              :background "#333300"
                              :box '(:line-width -2 :color "#666600"))
          (set-face-attribute 'flyspell-incorrect nil
                              :background "#550000"
                              :box '(:line-width -2 :color "#880000"))
          (setq ispell-highlight-face 'flyspell-incorrect
                ispell-local-dictionary "de_DE"
                ispell-program-name "aspell")))
#+END_SRC

** num3

#+BEGIN_SRC emacs-lisp
(eval-after-load 'num3-mode
  '(set-face-attribute 'num3-face-even nil
                       :foreground "#fa0"
                       :background "black"
                       :underline nil))
#+END_SRC

** pretty-symbol

#+BEGIN_SRC emacs-lisp
(setq pretty-symbol-categories '(knu-custom))

(mapc (lambda (x) (add-to-list 'pretty-symbol-patterns x))
      '((?α knu-custom "\\\\alpha" (org-mode latex-mode))
        (?Α knu-custom "\\\\Alpha" (org-mode latex-mode))
        (?β knu-custom "\\\\beta" (org-mode latex-mode))
        (?Β knu-custom "\\\\Beta" (org-mode latex-mode))
        (?γ knu-custom "\\\\gamma" (org-mode latex-mode))
        (?Γ knu-custom "\\\\Gamma" (org-mode latex-mode))
        (?δ knu-custom "\\\\delta" (org-mode latex-mode))
        (?Δ knu-custom "\\\\Delta" (org-mode latex-mode))
        (?ε knu-custom "\\\\epsilon" (org-mode latex-mode))
        (?Ε knu-custom "\\\\Epsilon" (org-mode latex-mode))
        (?ζ knu-custom "\\\\zeta" (org-mode latex-mode))
        (?Ζ knu-custom "\\\\Zeta" (org-mode latex-mode))
        (?η knu-custom "\\\\eta" (org-mode latex-mode))
        (?Η knu-custom "\\\\Eta" (org-mode latex-mode))
        (?θ knu-custom "\\\\theta" (org-mode latex-mode))
        (?Θ knu-custom "\\\\Theta" (org-mode latex-mode))
        (?ι knu-custom "\\\\iota" (org-mode latex-mode))
        (?Ι knu-custom "\\\\Iota" (org-mode latex-mode))
        (?κ knu-custom "\\\\kappa" (org-mode latex-mode))
        (?K knu-custom "\\\\Kappa" (org-mode latex-mode))
        (?λ knu-custom "\\\\lambda" (org-mode latex-mode))
        (?Λ knu-custom "\\\\Lambda" (org-mode latex-mode))
        (?μ knu-custom "\\\\mu" (org-mode latex-mode))
        (?Μ knu-custom "\\\\Mu" (org-mode latex-mode))
        (?ν knu-custom "\\\\nu" (org-mode latex-mode))
        (?Ν knu-custom "\\\\Nu" (org-mode latex-mode))
        (?ν knu-custom "\\\\vega" (org-mode latex-mode))
        (?ν knu-custom "\\\\Vega" (org-mode latex-mode))
        (?ξ knu-custom "\\\\xi" (org-mode latex-mode))
        (?Ξ knu-custom "\\\\Xi" (org-mode latex-mode))
        (?ο knu-custom "\\\\omicron" (org-mode latex-mode))
        (?Ο knu-custom "\\\\Omicron" (org-mode latex-mode))
        (?π knu-custom "\\\\pi" (org-mode latex-mode))
        (?Π knu-custom "\\\\Pi" (org-mode latex-mode))
        (?ρ knu-custom "\\\\rho" (org-mode latex-mode))
        (?Ρ knu-custom "\\\\Rho" (org-mode latex-mode))
        (?σ knu-custom "\\\\sigma" (org-mode latex-mode))
        (?Σ knu-custom "\\\\Sigma" (org-mode latex-mode))
        (?τ knu-custom "\\\\tau" (org-mode latex-mode))
        (?Τ knu-custom "\\\\Tau" (org-mode latex-mode))
        (?υ knu-custom "\\\\upsilon" (org-mode latex-mode))
        (?Y knu-custom "\\\\Upsilon" (org-mode latex-mode))
        (?φ knu-custom "\\\\phi" (org-mode latex-mode))
        (?Φ knu-custom "\\\\Phi" (org-mode latex-mode))
        (?χ knu-custom "\\\\chi" (org-mode latex-mode))
        (?Χ knu-custom "\\\\Chi" (org-mode latex-mode))
        (?ψ knu-custom "\\\\psi" (org-mode latex-mode))
        (?Ψ knu-custom "\\\\Psi" (org-mode latex-mode))
        (?ω knu-custom "\\\\omega" (org-mode latex-mode))
        (?Ω knu-custom "\\\\Omega" (org-mode latex-mode))
        (?∇ knu-custom "\\\\nabla" (org-mode latex-mode))
        (?∫ knu-custom "\\\\int" (org-mode latex-mode))
        (?∮ knu-custom "\\\\oint" (org-mode latex-mode))
        (?× knu-custom "\\\\times" (org-mode latex-mode))
        (?· knu-custom "\\\\cdot" (org-mode latex-mode))
        (?Σ knu-custom "\\\\sum" (org-mode latex-mode))
        (?± knu-custom "\\\\pm" (org-mode latex-mode))
        (?∓ knu-custom "\\\\mp" (org-mode latex-mode))
        (?≈ knu-custom "\\\\approx" (org-mode latex-mode))
        (?≠ knu-custom "\\\\neq" (org-mode latex-mode))
        (?≤ knu-custom "\\\\leq" (org-mode latex-mode))
        (?≥ knu-custom "\\\\geq" (org-mode latex-mode))
        (?⟶ knu-custom "\\\\rightarrow" (org-mode latex-mode))
        (?⟵ knu-custom "\\\\leftarrow" (org-mode latex-mode))
        (?⟹ knu-custom "\\\\Rightarrow" (org-mode latex-mode))
        (?⟸ knu-custom "\\\\Leftarrow" (org-mode latex-mode))
        (?⟼ knu-custom "\\\\mapsto" (org-mode latex-mode))
        (?↷ knu-custom "\\\\curvearrowright" (org-mode latex-mode))
        (?⟷ knu-custom "\\\\leftrightarrow" (org-mode latex-mode))
        (?d knu-custom "\\\\mathrm{d}" (org-mode latex-mode))
        (?∞ knu-custom "\\\\infty" (org-mode latex-mode))
        (?∂ knu-custom "\\\\partial" (org-mode latex-mode))
        (?≡ knu-custom "\\\\equiv" (org-mode latex-mode))
        (?≪ knu-custom "\\\\ll" (org-mode latex-mode))))
#+END_SRC

** highlight-parentheses

#+BEGIN_SRC emacs-lisp
(eval-after-load 'highlight-parentheses
  '(set-face-attribute 'hl-paren-face nil :weight 'ultra-bold))

(setq hl-paren-colors '("#05ffff" "#e07fef"
                        "#f0cf05" "#ee5555"
                        "#ffffff" "#00ff00"))
#+END_SRC

** yasnippet

#+BEGIN_SRC emacs-lisp
(yas-global-mode 1)
#+END_SRC

** ace-jump

#+BEGIN_SRC emacs-lisp
(eval-after-load 'ace-jump-mode
  '(set-face-attribute 'ace-jump-face-foreground nil
                       :background "black"
                       :foreground "green"
                       :weight 'bold))
#+END_SRC

* misc

** hooks

#+BEGIN_SRC emacs-lisp
(add-hook 'haskell-mode-hook 'haskell-indentation-mode)
(add-hook 'haskell-mode-hook 'hs-align-mode)
(add-hook 'c-mode-hook 'paredit-mode)
(add-hook 'w3m-fontify-after-hook (lambda ()
                                    (knu-w3m-cleanup)
                                    (knu-w3m-orgify)))
(add-hook 'kill-emacs-hook (lambda ()
                             (when (fboundp 'gnus-group-exit)
                               (defun gnus-y-or-n-p (yes) yes)
                               (gnus-group-exit))))
(add-hook 'ibuffer-mode-hook 'ibuffer-auto-mode)
(add-hook 'after-change-major-mode-hook (lambda ()
                                          (highlight-parentheses-mode)))
(add-hook 'LilyPond-mode-hook (lambda () (highlight-parentheses-mode)
                                (lilypond-pretty-beat-mode)))
(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
(add-hook 'org-mode-hook (lambda ()
                           (auto-fill-mode)
                           (num3-mode)
                           (whitespace-mode)
                           (pretty-symbols-mode)))
(add-hook 'post-command-hook 'hcz-set-cursor-color-according-to-mode)
(add-hook 'prog-mode-hook (lambda ()
                            (num3-mode)
                            (whitespace-mode)
                            (indentation-tree-mode)
                            (hs-minor-mode)))
(add-hook 'emacs-lisp-mode-hook 'hdefd-highlight-mode 'APPEND)
(add-hook 'emacs-lisp-mode-hook 'paredit-mode)
(add-hook 'eshell-mode-hook 'paredit-mode)
(add-hook 'post-command-hook
          (lambda () (when (or (equal major-mode 'emacs-lisp-mode)
                               (equal major-mode 'lisp-interaction-mode))
                       (when (not (equal buffer-undo-list-tmp buffer-undo-list))
                         (auto-indent-sexps)
                         (setq buffer-undo-list-tmp buffer-undo-list)))))

#+END_SRC

** tramp

#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh"
      tramp-default-method-alist
      '(("80\\.240\\.140\\.83#50683" "quxbar" "scpc") (nil "%" "smb")
        ("\\`\\(127\\.0\\.0\\.1\\|::1\\|localhost6?\\)\\'"
         "\\`root\\'" "su")
        (nil "\\`\\(anonymous\\|ftp\\)\\'" "ftp") ("\\`ftp\\." nil "ftp"))
      tramp-default-proxies-alist
      '(("80.240.140.83#50683" "root" "/ssh:quxbar@80.240.140.83#50683:")))
#+END_SRC

** misc

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)

(setq c-default-style '((c-mode . "stroustrup")
                        (java-mode . "java")
                        (awk-mode . "awk")
                        (other . "gnu"))
      ess-default-style 'C++)

(setq kill-do-not-save-duplicates t)
#+END_SRC
