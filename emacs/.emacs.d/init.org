* initializing
** packages
#+BEGIN_SRC emacs-lisp
  (package-initialize)
  (setq package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/")
          ("marmalade" . "http://marmalade-repo.org/packages/")
          ("melpa" . "http://melpa.milkbox.net/packages/")))
#+END_SRC
** loadpath
#+BEGIN_SRC emacs-lisp
  (mapc (lambda (x) (add-to-list 'load-path x))
        '("~/.emacs.d/lisp/"
          "~/git/org-panes/"
          "~/git/haskell-emacs/"))
#+END_SRC
** require packages
#+BEGIN_SRC emacs-lisp
  (mapc 'require '(hl-defined
                   yasnippet
                   org
                   org-panes
                   password-store
                   company
                   ace-jump-mode
                   haskell-mode
                   haskell-emacs))
#+END_SRC
** initialize packages
#+BEGIN_SRC emacs-lisp
(haskell-emacs-init)
#+END_SRC
** theming
#+BEGIN_SRC emacs-lisp
(load-theme 'deeper-blue)
#+END_SRC
** default layout
*** modes
#+BEGIN_SRC emacs-lisp
  (display-time-mode t)
  (scroll-bar-mode -1)
  (fringe-mode '(0 . nil))
  (column-number-mode 1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC
*** vars
#+BEGIN_SRC emacs-lisp
  (setq ;; font-use-system-font nil
        inhibit-startup-screen t
        ;; split-height-threshold 500
        visual-line-fringe-indicators '(nil right-curly-arrow)
        display-time-24hr-format t)
#+END_SRC
*** faces
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'mode-line nil
                      :background "#033"
                      :foreground "#9bb"
                      :box nil)
  (set-face-attribute 'mode-line-buffer-id nil
                      :foreground "#99dddd"
                      :box nil)
  (set-face-attribute 'mode-line-inactive nil
                      :inherit 'mode-line
                      :background "gray32"
                      :foreground "black"
                      :box nil
                      :weight 'light)
  (set-face-attribute 'default nil
                      :background "#000000"
                      :foreground "#ffffff"
                      :height 100
                      :foundry "unknown"
                      :family "DejaVu Sans Mono")
  (set-face-attribute 'fringe nil
                      :background "black"
                      :foreground "#0ff")
  (set-face-attribute 'region nil
                      :background "#505")
  (set-face-attribute 'cursor nil
                      :background "#709")
  (set-face-attribute 'org-archived nil
                      :foreground "#254555")
  (set-face-attribute 'org-checkbox nil
                      :inherit 'bold
                      :foreground "#2f2")
  (set-face-attribute 'org-done nil
                      :foreground "#5f5"
                      :weight 'ultra-bold)
  (set-face-attribute 'org-hide nil
                      :foreground "#777")
  (set-face-attribute 'org-todo nil
                      :foreground "#faa"
                      :weight 'ultra-bold)
  (set-face-attribute 'outline-1 nil
                      :inherit 'font-lock-function-name-face
                      :foreground "SkyBlue1"
                      :weight 'bold)
  (make-face 'my-gnus-face-6)
  (set-face-attribute 'my-gnus-face-6 nil
                      :foreground "#9EE"
                      :background "#333"
                      :weight 'bold)
  (make-face 'my-gnus-face-7)
  (set-face-attribute 'my-gnus-face-7 nil
                      :foreground "#9EE"
                      :background "#333"
                      :weight 'bold
                      :box '(:line-width -1 :color "#555"))
  ;; (set-face-attribute 'popup-tip-face nil
  ;;                     :foreground "#000"
  ;;                     :background "#5cd")
  ;; (set-face-attribute 'popup-face nil
  ;;                     :foreground "#ccc"
  ;;                     :background "#333")
  ;; (set-face-attribute 'popup-menu-selection-face nil
  ;;                     :foreground "#cff"
  ;;                     :background "#555")
  (set-face-attribute 'ace-jump-face-foreground nil
                      :background "black"
                      :foreground "green"
                      :weight 'bold)
#+END_SRC
** cursor
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode -1)
  (defvar hcz-set-cursor-color-color "")
  (defvar hcz-set-cursor-color-buffer "")
  (defun hcz-set-cursor-color-according-to-mode ()
    "change cursor color according to some minor modes."
    (let ((color (if (and (boundp 'knu-org-mode-map)
                          (org-inside-LaTeX-fragment-p)) "#2a6"
                   (if buffer-read-only "white"
                     (if overwrite-mode "#fa0"
                       "#909")))))
      (unless (and
               (string= color hcz-set-cursor-color-color)
               (string= (buffer-name) hcz-set-cursor-color-buffer))
        (set-cursor-color (setq hcz-set-cursor-color-color color))
        (setq hcz-set-cursor-color-buffer (buffer-name)))))
#+END_SRC
** key-map
#+BEGIN_SRC emacs-lisp
  (mapc (lambda (x) (define-key global-map (kbd (car x)) (cadr x)))
        '(("<M-left>" backward-sentence)
          ("<M-right>" forward-sentence)
          ("<M-backspace>" backward-kill-sentence)
          ("<M-delete>" kill-sentence)
          ("\C-cm" magit-status)
          ("S-SPC" ace-jump-mode)))
#+END_SRC
** got root?
#+BEGIN_SRC emacs-lisp
(when (equal (getenv "USER") "root")
  (set-face-background 'mode-line "#400")
  (set-face-foreground 'mode-line "#b00")
  (set-face-foreground 'mode-line-buffer-id "#ee5555"))
#+END_SRC
* major-modes
** org-caldav
#+BEGIN_SRC emacs-lisp
  (setq org-caldav-url "https://80.240.140.83/owncloud/remote.php/caldav/calendars/quxbar")
  (setq org-caldav-calendar-id "private")
  (setq org-caldav-inbox "/home/quxbar/org/calendar.org")
#+END_SRC
** python
#+BEGIN_SRC emacs-lisp
  (require 'jedi)
  (require 'auto-complete)
  (setq python-environment-virtualenv
        (append python-environment-virtualenv
                '("--python" "python3")))
  (setq py-shell-name "python3")
  (setq python-shell-exec-path "python3")
  (setq jedi:environment-root "jedi"
        jedi:environment-virtualenv
        (append python-environment-virtualenv
                '("--python" "python3")))
  (setq python-shell-interpreter "python3")
  (add-hook 'python-mode-hook
            (lambda ()
              (jedi:setup)
              (jedi:ac-setup)))
#+END_SRC
** org
#+BEGIN_SRC emacs-lisp
  (setq org-time-clocksum-format '(:hours "%d"
                                          :require-hours t
                                          :minutes ":%02d"
                                          :require-minutes t))
  (setq org-catch-invisible-edits 'error
        org-confirm-babel-evaluate nil
        org-ditaa-eps-jar-path "~/.emacs.d/DitaaEps.jar"
        org-ditaa-jar-path "~/.emacs.d/ditaa0_9.jar"
        org-drawers '("PROPERTIES" "CLOCK" "LOGBOOK" "RESULTS" "INIT")
        org-export-backends '(ascii html latex odt)
        org-export-headline-levels 4
        org-format-latex-options '(:foreground "#0da"
                                               :background default
                                               :scale 2.0
                                               :html-foreground "Black"
                                               :html-background "Transparent"
                                               :html-scale 1.0
                                               :matchers ("begin" "$1" "$" "$$" "\\(" "\\["))
        org-hierarchical-todo-statistics nil
        org-highlight-latex-and-related '(latex script entities)
        org-image-actual-width 200
        org-latex-classes '(("article" "\\documentclass[11pt]{scrartcl}"
                             ("\\section{%s}" . "\\section*{%s}")
                             ("\\subsection{%s}" . "\\subsection*{%s}")
                             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                             ("\\paragraph{%s}" . "\\paragraph*{%s}")
                             ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
                            ("report" "\\documentclass[11pt]{report}"
                             ("\\part{%s}" . "\\part*{%s}")
                             ("\\chapter{%s}" . "\\chapter*{%s}")
                             ("\\section{%s}" . "\\section*{%s}")
                             ("\\subsection{%s}" . "\\subsection*{%s}")
                             ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
                            ("book" "\\documentclass[11pt]{book}"
                             ("\\part{%s}" . "\\part*{%s}")
                             ("\\chapter{%s}" . "\\chapter*{%s}")
                             ("\\section{%s}" . "\\section*{%s}")
                             ("\\subsection{%s}" . "\\subsection*{%s}")
                             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
        org-latex-preview-ltxpng-directory "~/ltxpreview/"
        org-list-empty-line-terminates-plain-lists t
        org-log-done 'time
        org-src-fontify-natively t
        org-startup-folded t
        org-startup-indented t
        org-startup-with-inline-images t
        org-todo-keyword-faces '(("FAILED" . "#f00") ("CANCELED" . "#ee3") ("WAIT" . "#f0f"))
        org-todo-keywords '((sequence "TODO" "WAIT" "|" "DONE" "CANCELED" "FAILED"))
        org-format-latex-header "\\documentclass{article}
  \\usepackage[usenames]{color}
  \\usepackage{etoolbox}
  \\usepackage{mdframed}
  [PACKAGES]
  [DEFAULT-PACKAGES]
  \\pagestyle{empty}             % do not remove
  % The settings below are copied from fullpage.sty
  \\setlength{\\textwidth}{\\paperwidth}
  \\addtolength{\\textwidth}{-13cm}
  \\setlength{\\oddsidemargin}{1.5cm}
  \\addtolength{\\oddsidemargin}{-2.54cm}
  \\setlength{\\evensidemargin}{\\oddsidemargin}
  \\setlength{\\textheight}{\\paperheight}
  \\addtolength{\\textheight}{-\\headheight}
  \\addtolength{\\textheight}{-\\headsep}
  \\addtolength{\\textheight}{-\\footskip}
  \\addtolength{\\textheight}{-3cm}
  \\setlength{\\topmargin}{1.5cm}
  \\addtolength{\\topmargin}{-2.54cm}
  \\definecolor{bg}{rgb}{0,0.1,0.1}\\definecolor{fg}{rgb}{0.2,1,0.7}
  \\BeforeBeginEnvironment{align*}{\\begin{mdframed}[backgroundcolor=bg, innertopmargin=-0.2cm]\\color{fg}}
  \\AfterEndEnvironment{align*}{\\end{mdframed}}
  \\BeforeBeginEnvironment{align}{\\begin{mdframed}[backgroundcolor=bg, innertopmargin=-0.2cm]\\color{fg}}
  \\AfterEndEnvironment{align}{\\end{mdframed}}
  \\BeforeBeginEnvironment{gather*}{\\begin{mdframed}[backgroundcolor=bg, innertopmargin=-0.2cm]\\color{fg}}
  \\AfterEndEnvironment{gather*}{\\end{mdframed}}
  \\BeforeBeginEnvironment{gather}{\\begin{mdframed}[backgroundcolor=bg, innertopmargin=-0.2cm]\\color{fg}}
  \\AfterEndEnvironment{gather}{\\end{mdframed}}
  \\newenvironment{definition}{\\begin{mdframed}[backgroundcolor=bg]\\color{fg} \\textbf{\\textsc{Definition:}} }{\\end{mdframed}}
  \\newenvironment{note}{\\begin{mdframed}[backgroundcolor=bg]\\color{fg} \\textbf{\\textsc{Bemerkung:}} }{\\end{mdframed}}
  \\newenvironment{example}{\\begin{mdframed}[backgroundcolor=bg]\\color{fg} \\textbf{\\textsc{Beispiel:}} }{\\end{mdframed}}
  \\newcommand{\\e}{\\mathrm{e}}")
#+END_SRC

** lilypond

#+BEGIN_SRC emacs-lisp
(setq LilyPond-indent-level 4)
#+END_SRC

** manpages

#+BEGIN_SRC emacs-lisp
(setq Man-notify-method 'pushy
      Man-width 80)
#+END_SRC

** ediff

#+BEGIN_SRC emacs-lisp
(setq ediff-split-window-function 'split-window-horizontally
      ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC

** erc

#+BEGIN_SRC emacs-lisp
(setq erc-nick "quxbam"
      erc-prompt ">>>"
      erc-prompt-for-password nil
      erc-system-name "foobar"
      erc-timestamp-right-column 70)
#+END_SRC

** gnus

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Florian Knupfer"
        user-mail-address "fknupfer@gmail.com"
        message-generate-headers-first t
        message-send-mail-function 'smtpmail-send-it
        smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
        smtpmail-auth-credentials '(("smtp.gmail.com" 587
                                     "fknupfer@gmail.com" nil))
        smtpmail-default-smtp-server "smtp.gmail.com"
        smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 587
        starttls-use-gnutls t
        mail-user-agent 'gnus-user-agent
        gnus-default-adaptive-word-score-alist '((82 . 1) (67 . -1)
                                                 (75 . -2) (114 . -1))
        gnus-treat-fill-article t
        gnus-treat-leading-whitespace t
        gnus-treat-strip-multiple-blank-lines t
        gnus-treat-strip-trailing-blank-lines t
        gnus-treat-unsplit-urls t)

  (eval-after-load "mm-decode"
    '(progn
       (add-to-list 'mm-discouraged-alternatives "text/html")
       (add-to-list 'mm-discouraged-alternatives "text/richtext")))

  (eval-after-load 'gnus
    '(progn
       (setq gnus-select-method '(nnimap "gmail"
                                         (nnimap-address "imap.gmail.com")
                                         (nnimap-server-port 993)
                                         (nnimap-stream ssl)))

       (add-to-list 'gnus-secondary-select-methods
                    '(nntp "eternal september"
                           (nntp-address "reader443.eternal-september.org")
                           (nntp-authinfo-force t)))
       (add-to-list 'gnus-secondary-select-methods
                    '(nntp "gmane"
                           (nntp-address "news.gmane.org")))
       (add-to-list 'gnus-secondary-select-methods
                    '(nnimap "Musikschule"
                             (nnimap-address "secure.emailsrvr.com")
                             (nnimap-server-port 993)
                             (nnimap-stream ssl)))

       (setq-default gnus-summary-mark-below -300
                     gnus-summary-thread-gathering-function 'gnus-gather-threads-by-references)
       (setq gnus-face-5 'font-lock-comment-face)
       (setq gnus-face-6 'my-gnus-face-6)
       (setq gnus-face-7 'my-gnus-face-7)
       (setq gnus-summary-thread-gathering-function 'gnus-gather-threads-by-subject
             gnus-thread-sort-functions '((not gnus-thread-sort-by-date))
             gnus-summary-line-format
             "%U%R%z %5{│%}%6{ %d %}%5{│%} %-23,23f %5{│%}%* %5{%B%}%s\\n"
             gnus-sum-thread-tree-false-root "• "
             gnus-sum-thread-tree-indent "  "
             gnus-sum-thread-tree-single-indent "  "
             gnus-sum-thread-tree-leaf-with-other "├─▶ "
             gnus-sum-thread-tree-root "• "
             gnus-sum-thread-tree-single-leaf "└─▶ "
             gnus-sum-thread-tree-vertical "│ "
             gnus-group-line-format "%M%S%p%P%5y:%B%(%G%)\n"
             gnus-posting-styles '((message-news-p
                                    (name "quxbam")
                                    (address "no@news.invalid"))))
       (setq gnus-use-adaptive-scoring '(word))
       (setq gnus-parameters
             '(("WIKI"
                (gnus-summary-line-format
                 "%U%R %5{│%}%6{ %5,5i %}%5{│%}%* %-40,40f %5{│ %s%}\\n")
                (gnus-article-sort-functions '(gnus-article-sort-by-author gnus-article-sort-by-subject gnus-article-sort-by-score))
                (gnus-show-threads nil))
               ("musikschule"
                (gnus-article-sort-functions '((not gnus-article-sort-by-date)))
                (gnus-show-threads nil))))
       (setq nnml-use-compressed-files t
             gnus-topic-display-empty-topics nil
             gnus-topic-line-format "%i%i%7{ %(%-12n%)%7A %}\n")
       (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
       (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)))
#+END_SRC

** w3m

*** vars

#+BEGIN_SRC emacs-lisp
(setq w3m-enable-google-feeling-lucky nil
      w3m-home-page "about:blank"
      w3m-search-default-engine "duckduckgo"
      w3m-fill-column 60
      w3m-search-engine-alist
      '(("duckduckgo" "https://duckduckgo.com/lite/?q=%s" undecided)
        ("google" "https://www.google.com/search?q=%s&ie=utf-8&oe=utf-8" utf-8)
        ("google-en" "https://www.google.com/search?q=%s&hl=en&ie=utf-8&oe=utf-8" utf-8)
        ("emacswiki" "http://www.emacswiki.org/cgi-bin/wiki?search=%s" nil)
        ("en.wikipedia" "https://en.wikipedia.org/wiki/Special:Search?search=%s" nil)
        ("de.wikipedia" "https://de.wikipedia.org/wiki/Spezial:Search?search=%s" utf-8))
      w3m-session-load-crashed-sessions nil
      w3m-uri-replace-alist
      '(("\\`enwi:" w3m-search-uri-replace "en.wikipedia")
        ("\\`dewi:" w3m-search-uri-replace "de.wikipedia")
        ("\\`dd:" w3m-search-uri-replace "duckduckgo")
        ("\\`gg:" w3m-search-uri-replace "google"))
      w3m-use-favicon nil
      w3m-use-title-buffer-name t)
#+END_SRC

*** functions
#+BEGIN_SRC emacs-lisp
  (eval-after-load 'w3m
    '(progn
       (defun knu-w3m-cleanup ()
         (save-excursion
           (goto-char (point-min))
           (while (re-search-forward "^ *\\*+ *$\\| +$" nil t)
             (replace-match ""))))

       (defun sacha/w3m-open-in-firefox ()
         (interactive)
         (browse-url-firefox w3m-current-url))))
#+END_SRC

*** key-map

#+BEGIN_SRC emacs-lisp
(eval-after-load 'w3m
  '(mapc (lambda (x) (define-key w3m-mode-map (kbd (car x)) (cadr x)))
         '(("M-<left>" w3m-view-previous-page)
           ("M-<right>" w3m-view-next-page)
           ("RET" w3m-view-this-url-new-session)
           ("C-w" w3m-delete-buffer)
           ("S-RET" w3m-view-this-url)
           ("<tab>" org-cycle)
           ("<S-iso-lefttab>" org-shifttab)
           ("d" w3m-download-with-wget)
           ("g" w3m-goto-url)
           ("G" w3m-goto-url-new-session)
           ("C-f" sacha/w3m-open-in-firefox)
           ("M-RET" w3m-view-this-url-new-session)
           ("<left>" backward-char)
           ("<right>" forward-char)
           ("<up>" previous-line)
           ("<down>" next-line)
           ("M-<down>" w3m-next-anchor)
           ("M-<up>" w3m-previous-anchor)
           ("S-SPC" ace-jump-mode))))
#+END_SRC

*** faces

#+BEGIN_SRC emacs-lisp
(eval-after-load 'w3m
  '(progn (set-face-attribute 'w3m-arrived-anchor nil :foreground "#8888ee")
          (set-face-attribute 'w3m-current-anchor nil :weight 'ultra-bold)
          (set-face-attribute 'w3m-tab-background nil :foreground "#88dddd" :background "black")
          (set-face-attribute 'w3m-tab-selected nil :foreground "black" :background "grey75")
          (set-face-attribute 'w3m-tab-selected-retrieving nil :foreground "black" :background "#dd6666")
          (set-face-attribute 'w3m-tab-unselected nil :foreground "black" :background "grey30")
          (set-face-attribute 'w3m-tab-unselected-retrieving nil :foreground "black" :background "#aa4444")
          (set-face-attribute 'w3m-tab-unselected-unseen nil :foreground "black" :background "grey90")))
#+END_SRC

** volume

#+BEGIN_SRC emacs-lisp
(eval-after-load 'volume
  '(progn (setq volume-amixer-default-channel "Speaker"
                volume-backend 'volume-amixer-backend
                volume-electric-mode t)))
#+END_SRC

* minor-modes
** fill-column-indicator
#+BEGIN_SRC emacs-lisp
(setq fci-always-use-textual-rule t
      fci-rule-column 80
      fci-rule-color "#cc0000")
#+END_SRC

** autocomplete
#+BEGIN_SRC emacs-lisp
(setq ac-override-local-map nil
      ac-use-menu-map t
      ac-candidate-limit 20)
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
  (global-flycheck-mode 1)
  (set-face-attribute 'flycheck-error nil
                      :foreground "#D00"
                      :background "#222"
                      :underline nil
                      :weight 'ultrabold)
  (set-face-attribute 'flycheck-warning nil
                      :foreground "#CC0"
                      :background "#222"
                      :underline nil
                      :weight 'ultrabold)
  (set-face-attribute 'flycheck-info nil
                      :foreground "#66F"
                      :background "#008"
                      :underline nil
                      :weight 'ultrabold)
#+END_SRC
** keyfreq

#+BEGIN_SRC emacs-lisp
(keyfreq-autosave-mode 1)
(keyfreq-mode 1)
#+END_SRC

** whitespace

#+BEGIN_SRC emacs-lisp
(setq whitespace-style '(face trailing tabs)
      whitespace-tab-regexp "\\(\\\\alpha\\|\\\\beta\\|\\\\gamma\\|\\\\mu\\|\\\\nu\\|\\\\epsilon\\|\\\\lambda\\|\\\\sigma\\|\\\\tau\\|\\\\eta\\|\\\\omega\\|\\\\theta\\|\\\\rho\\|\\\\phi\\|\\\\psi\\|\\\\upsilon\\|\\\\pi\\|\\\\delta\\|\\\\kappa\\|\\\\xi\\|\\\\chi\\|\\\\Pi\\|\\\\Phi\\|\\\\Gamma\\|\\\\Omega\\|\\\\Lambda\\|\\\\nabla\\|\\\\Delta\\|\\\\int\\|\\\\oint\\|\\\\times\\|\\\\cdot\\|\\\\sum\\|\\\\pm\\|\\\\mp\\|\\\\geq\\|\\\\leq\\|\\\\neq\\|\\\\approx\\|\\\\rightarrow\\|\\\\leftarrow\\|\\\\Rightarrow\\|\\\\Leftarrow\\|\\\\mapsto\\|\\\\curvearrowright\\|\\\\leftrightarrow\\|\\\\mathrm{d}\\|\\\\infty\\|\\\\partial\\|\\\\equiv\\|\\\\ll\\|IO \\|\\\\underline\\)")

(eval-after-load 'whitespace
  '(set-face-attribute 'whitespace-tab nil
                       :background "nil"
                       :foreground "#00eeaa"
                       :weight 'ultra-bold))
#+END_SRC

** paredit

*** key-map

#+BEGIN_SRC emacs-lisp
(eval-after-load 'paredit
  '(mapc (lambda (x) (define-key paredit-mode-map (kbd (car x)) (cadr x)))
         '(("<C-right>" nil)
           ("<C-left>" nil)
           ("<M-right>" paredit-forward)
           ("<M-left>" paredit-backward)
           ("<C-up>" paredit-forward-barf-sexp)
           ("<C-down>" paredit-forward-slurp-sexp)
           ("<M-up>" paredit-backward-slurp-sexp)
           ("<M-down>" paredit-backward-barf-sexp)
           ("<M-backspace>" backward-kill-sexp)
           ("<M-delete>" kill-sexp)
           ("C-k" paredit-kill-and-join-forward)
           ("<delete>" paredit-del-and-join-forward)
           ("<backspace>" paredit-del-backward-and-join)
           ("<tab>" completion-at-point)
           ("<RET>" paredit-newline)
           ("<C-backspace>" paredit-backward-kill-word)
           ("<C-delete>" paredit-forward-kill-word)
           ("{" paredit-open-curly)
           ("}" paredit-close-curly))))
#+END_SRC

*** functions

#+BEGIN_SRC emacs-lisp
(defvar buffer-undo-list-tmp nil)

(defun auto-indent-sexps ()
  (save-excursion (paredit-indent-sexps)))

(defun paredit-del-and-join-forward (&optional arg)
  (interactive "P")
  (if (and (eolp) (not (bolp)))
      (delete-indentation t)
    (paredit-forward-delete arg)))

(defun paredit-kill-and-join-forward (&optional arg)
  (interactive "P")
  (if (and (eolp) (not (bolp)))
      (delete-indentation t)
    (paredit-kill arg)))

(defun paredit-del-backward-and-join (&optional arg)
  (interactive "P")
  (if (looking-back "\\(^ *\\)")
      (delete-indentation)
    (paredit-backward-delete arg)))
#+END_SRC

** num3

#+BEGIN_SRC emacs-lisp
(eval-after-load 'num3-mode
  '(set-face-attribute 'num3-face-even nil
                       :foreground "#fa0"
                       :background "black"
                       :underline nil))
#+END_SRC

** highlight-parentheses

#+BEGIN_SRC emacs-lisp
(eval-after-load 'highlight-parentheses
  '(set-face-attribute 'hl-paren-face nil :weight 'ultra-bold))

(setq hl-paren-colors '("#05ffff" "#e07fef"
                        "#f0cf05" "#ee5555"
                        "#ffffff" "#00ff00"))
#+END_SRC

** yasnippet

#+BEGIN_SRC emacs-lisp
(yas-global-mode 1)
#+END_SRC

* misc
** passwordlength
#+BEGIN_SRC emacs-lisp
(setq password-store-password-length 20)
#+END_SRC

** hooks
#+BEGIN_SRC emacs-lisp
  (add-hook 'haskell-mode-hook (lambda ()
                                 (buffer-file-name)
                                 (structured-haskell-mode)
                                 (ghc-init)
                                 (company-mode)))
  (add-to-list 'company-backends 'company-ghc)
  (add-hook 'kill-emacs-hook (lambda ()
                                 (when (fboundp 'gnus-group-exit)
                                   (defun gnus-y-or-n-p (yes) yes)
                                   (gnus-group-exit))))
  (add-hook 'ibuffer-mode-hook 'ibuffer-auto-mode)
  (add-hook 'after-change-major-mode-hook (lambda ()
                                              (highlight-parentheses-mode)))
  (add-hook 'LilyPond-mode-hook (lambda () (highlight-parentheses-mode)))
  (add-hook 'org-mode-hook (lambda ()
                               (auto-fill-mode)
                               (num3-mode)
                               (whitespace-mode)))
  (add-hook 'post-command-hook 'hcz-set-cursor-color-according-to-mode)
  (add-hook 'prog-mode-hook (lambda ()
                                (num3-mode)
                                (whitespace-mode)))
  (add-hook 'emacs-lisp-mode-hook 'hdefd-highlight-mode 'APPEND)
  (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
  ;; (add-hook 'post-command-hook
  ;;             (lambda () (when (or (equal major-mode 'emacs-lisp-mode)
  ;;                                  (equal major-mode 'lisp-interaction-mode))
  ;;                          (when (not (equal buffer-undo-list-tmp buffer-undo-list))
  ;;                            (auto-indent-sexps)
  ;;                            (setq buffer-undo-list-tmp buffer-undo-list)))))
#+END_SRC
** tramp
#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh"
        tramp-default-method-alist
        '(("80\\.240\\.140\\.83#50683" "quxbar" "scpc") (nil "%" "smb")
          ("\\`\\(127\\.0\\.0\\.1\\|::1\\|localhost6?\\)\\'"
           "\\`root\\'" "su")
          (nil "\\`\\(anonymous\\|ftp\\)\\'" "ftp") ("\\`ftp\\." nil "ftp"))
        tramp-default-proxies-alist
        '(("80.240.140.83#50683" "root" "/ssh:quxbar@80.240.140.83#50683:")))
#+END_SRC
** misc
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)

  (setq c-default-style '((c-mode . "stroustrup")
                          (java-mode . "java")
                          (awk-mode . "awk")
                          (other . "gnu"))
        ess-default-style 'C++)

  (setq kill-do-not-save-duplicates t)
#+END_SRC
* Customize
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+END_SRC
